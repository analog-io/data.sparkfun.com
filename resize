#!/usr/bin/env node

var dotenv = require('dotenv').load(),
    path = require('path'),
    fs = require('fs'),
    exec = require('child_process').exec,
    Meta = require('phant-meta-mongodb'),
    Storage = require('phant-stream-csv'),
    Keychain = require('phant-keychain-hex');

var reg = new RegExp('stream.csv');

var keys = Keychain({
  publicSalt: process.env.PHANT_PUBLIC_SALT || 'public salt',
  privateSalt: process.env.PHANT_PRIVATE_SALT || 'private salt',
  deleteSalt: process.env.PHANT_DELETE_SALT || 'delete salt'
});

var meta = Meta({
  url: process.env.PHANT_MONGO_URL || 'mongodb://localhost/phant'
});

var storage = Storage({
  directory: process.env.PHANT_STORAGEDIR || 'tmp',
  cap: process.env.PHANT_CAP || 50 * 1024 * 1024, // 50mb
  chunk: process.env.PHANT_CHUNK || 500 * 1024 // 500k
});

meta.each(function(err, stream) {

  var dir = path.join(
    process.env.PHANT_STORAGEDIR || 'tmp',
    stream.id.slice(0, 4),
    stream.id.slice(4)
  );

  fs.exists(path.join(dir, 'stream.csv'), function(exists) {

    if(! exists) {
      return;
    }

    var command = 'cat $(ls ' + path.join(dir, 'stream.csv') +
                  '* | sort -n -t . -k 3,3) > ' + path.join(dir, 'join.csv') +
                  ' && rm ' + path.join(dir, 'stream.') + '* && ' +
                  'split -a 4 -C ' + (process.env.PHANT_CHUNK || 500 * 1024) + ' -d ' +
                  path.join(dir, 'join.csv') + ' ' +
                  path.join(dir, 'stream.csv.') + ' && rm ' +
                  path.join(dir, 'join.csv');

    exec(command, function(err) {

      if(err) {
        return console.log('join error: ' + err + ' ' + stream.id);
      }

      fs.readdir(dir, function(err, files) {

        var matched = [],
            reg = new RegExp('stream.csv.');

        if(err) {
          return console.log(err);
        }

        // only grab stream.csv. files
        matched = files.filter(function(f) {
          return reg.test(f);
        });

        // remove leading zeros
        matched.forEach(function(f) {

          var split = f.split('.');

          split[2] = parseInt(split[2]) - 1;

          if(split[2] === -1) {
            split.splice(2, 1);
          }

          fs.renameSync(path.join(dir, f), path.join(dir, split.join('.')));

        });

        console.log('resized ' + stream.id);

      });

    });

  });

});
