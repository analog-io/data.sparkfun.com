#!/usr/bin/env node

var Phant = require('phant'),
    dotenv = require('dotenv').load(),
    path = require('path'),
    HttpManager = require('phant-manager-sparkfun'),
    Keychain = require('phant-keychain-hex'),
    Meta = require('phant-meta-mongodb'),
    Storage = require('phant-stream-csv'),
    Repeater = require('phant-output-repeater'),
    Websocket = require('phant-output-websocket'),
    Throttler = require('phant-throttler-redis'),
    socket_redis = require('socket.io-redis'),
    Statsd = require('phant-output-statsd'),
    Mailer = require('phant-notify-email'),
    app = Phant();

var mailer = Mailer({
  from: 'data.sparkfun.com <data@sparkfun.com>',
  subject: 'New data.sparkfun.com Stream: '
});

mailer.useSendmail();

var keys = Keychain({
  publicSalt: process.env.PHANT_PUBLIC_SALT || 'public salt',
  privateSalt: process.env.PHANT_PRIVATE_SALT || 'private salt',
  deleteSalt: process.env.PHANT_DELETE_SALT || 'delete salt'
});

var mongo = Meta({
  url: process.env.PHANT_MONGO_URL || 'mongodb://localhost/phant'
});

var stream = Storage({
  directory: process.env.PHANT_STORAGEDIR || 'tmp',
  cap: process.env.PHANT_CAP || 50 * 1024 * 1024, // 50mb
  chunk: process.env.PHANT_CHUNK || 500 * 1024 // 500k
});

var validator = Phant.Validator({
  metadata: mongo
});

var httpOutput = Phant.HttpOutput({
  validator: validator,
  storage: stream,
  keychain: keys
});

var throttler = Throttler({
  host: process.env.PHANT_REDIS_HOST || 'localhost',
  port: process.env.PHANT_REDIS_PORT || 6379
});

var httpInput = Phant.HttpInput({
  throttler: throttler,
  validator: validator,
  keychain: keys
});

var httpManager = HttpManager({
  metadata: mongo,
  keychain: keys,
  validator: validator,
  notifiers: [mailer]
});

// start listening for connections
Phant.HttpServer.listen(process.env.PHANT_PORT || 8080);

// attach input to http server
Phant.HttpServer.use(httpInput);

// attach manager to http server
Phant.HttpServer.use(httpManager);

// register manager with phant
app.registerManager(httpManager);

// attach output to http server
Phant.HttpServer.use(httpOutput);

// register input with phant
app.registerInput(httpInput);

app.registerOutput(stream);
app.registerOutput(httpOutput);

app.registerOutput(
  Websocket({
    server: Phant.HttpServer.server,
    keychain: keys,
    adapter: socket_redis({
      host: process.env.PHANT_REDIS_HOST || 'localhost',
      port: process.env.PHANT_REDIS_PORT || 6379
    })
  })
);

app.registerOutput(
  Statsd({
    host: process.env.PHANT_STATSD_HOST || 'localhost',
    port: process.env.PHANT_STATSD_PORT || 8125
  })
);

/*
app.registerOutput(
  Repeater({
    host: process.env.PHANT_REPEATER_HOST || 'localhost',
    port: process.env.PHANT_REPEATER_PORT || 5000
  })
);
*/
